name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: stable
    - run: cargo fmt --all -- --check

  check:
    name: Check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable, nightly, 1.63]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
          - build: nightly
            os: ubuntu-latest
            rust: nightly
          - build: 1.63
            os: ubuntu-latest
            rust: 1.63

    env:
      # -D warnings is commented out in our install-rust action; re-add it here.
      RUSTFLAGS: -D warnings
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}

    - run: >
        rustup target add
        x86_64-unknown-linux-musl
        x86_64-unknown-linux-gnux32
        x86_64-linux-android
        i686-linux-android
        x86_64-apple-darwin
        x86_64-unknown-freebsd
        x86_64-unknown-netbsd
        x86_64-unknown-illumos
        i686-unknown-linux-gnu
        i686-unknown-linux-musl
        wasm32-unknown-emscripten
        riscv64gc-unknown-linux-gnu
        aarch64-unknown-linux-gnu
        aarch64-unknown-linux-musl
        powerpc64le-unknown-linux-gnu
        armv5te-unknown-linux-gnueabi
        s390x-unknown-linux-gnu
        arm-linux-androideabi
        sparc64-unknown-linux-gnu
        sparcv9-sun-solaris
        aarch64-linux-android
        aarch64-apple-ios
    - if: matrix.rust != '1.63'
      run: rustup target add x86_64-unknown-fuchsia
    - if: matrix.rust == '1.63'
      run: rustup target add x86_64-fuchsia

    - name: Install cross-compilation tools
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y gcc-i686-linux-gnu gcc-aarch64-linux-gnu gcc-riscv64-linux-gnu gcc-arm-linux-gnueabi musl-tools

    - run: cargo check --workspace --release -vv --all-targets
    - run: cargo check --workspace --release -vv --target=aarch64-linux-android --all-targets
    - run: cargo check --workspace --release -vv --target=x86_64-unknown-linux-musl --all-targets
    - run: cargo check --workspace --release -vv --target=x86_64-unknown-linux-gnux32 --all-targets
    - run: cargo check --workspace --release -vv --target=x86_64-linux-android --all-targets
    - run: cargo check --workspace --release -vv --target=i686-linux-android --all-targets
    - run: cargo check --workspace --release -vv --target=x86_64-apple-darwin --all-targets
    - run: cargo check --workspace --release -vv --target=x86_64-unknown-freebsd --all-targets
    - run: cargo check --workspace --release -vv --target=x86_64-unknown-netbsd --all-targets
    - if: matrix.rust != '1.63'
      run: cargo check --workspace --release -vv --target=x86_64-unknown-fuchsia --all-targets
    - if: matrix.rust == '1.63'
      run: cargo check --workspace --release -vv --target=x86_64-fuchsia --all-targets
    - run: cargo check --workspace --release -vv --target=x86_64-unknown-illumos --all-targets
    - run: cargo check --workspace --release -vv --target=i686-unknown-linux-gnu --all-targets
    - run: cargo check --workspace --release -vv --target=i686-unknown-linux-musl --all-targets
    - run: cargo check --workspace --release -vv --target=i686-unknown-linux-musl --all-targets
    - run: cargo check --workspace --release -vv --target=wasm32-unknown-emscripten --all-targets
    - run: cargo check --workspace --release -vv --target=riscv64gc-unknown-linux-gnu --all-targets
    - run: cargo check --workspace --release -vv --target=aarch64-unknown-linux-gnu --all-targets
    - run: cargo check --workspace --release -vv --target=aarch64-unknown-linux-musl --all-targets
    - run: cargo check --workspace --release -vv --target=aarch64-unknown-linux-musl --all-targets
    - run: cargo check --workspace --release -vv --target=powerpc64le-unknown-linux-gnu --all-targets
    - run: cargo check --workspace --release -vv --target=armv5te-unknown-linux-gnueabi --all-targets
    - run: cargo check --workspace --release -vv --target=s390x-unknown-linux-gnu --all-targets
    - run: cargo check --workspace --release -vv --target=arm-linux-androideabi --all-targets
    - run: cargo check --workspace --release -vv --target=sparc64-unknown-linux-gnu --all-targets
    - run: cargo check --workspace --release -vv --target=sparcv9-sun-solaris --all-targets
    - run: cargo check --workspace --release -vv --target=aarch64-apple-ios --all-targets
    - run: cargo check --workspace --release -vv --target=aarch64-linux-android --all-targets

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    env:
      QEMU_BUILD_VERSION: 8.1.0
    strategy:
      matrix:
        build: [ubuntu, ubuntu-20.04, i686-linux, aarch64-linux, powerpc64le-linux, riscv64-linux, s390x-linux, arm-linux, ubuntu-stable, ubuntu-1.63, i686-linux-stable, aarch64-linux-stable, riscv64-linux-stable, s390x-linux-stable, powerpc64le-linux-stable, arm-linux-stable, ubuntu-1.63, i686-linux-1.63, aarch64-linux-1.63, riscv64-linux-1.63, s390x-linux-1.63, powerpc64le-linux-1.63, arm-linux-1.63, macos-latest, macos-11]
        include:
          - build: ubuntu
            os: ubuntu-latest
            rust: nightly
          - build: ubuntu-20.04
            os: ubuntu-20.04
            rust: nightly
          - build: i686-linux
            os: ubuntu-latest
            rust: nightly
            target: i686-unknown-linux-gnu
            gcc_package: gcc-i686-linux-gnu
            gcc: i686-linux-gnu-gcc
            libc_package: libc-dev-i386-cross
          - build: aarch64-linux
            os: ubuntu-latest
            rust: nightly
            target: aarch64-unknown-linux-gnu
            gcc_package: gcc-aarch64-linux-gnu
            gcc: aarch64-linux-gnu-gcc
            qemu: qemu-aarch64
            qemu_args: -L /usr/aarch64-linux-gnu
            qemu_target: aarch64-linux-user
          - build: powerpc64le-linux
            os: ubuntu-latest
            rust: nightly
            target: powerpc64le-unknown-linux-gnu
            gcc_package: gcc-powerpc64le-linux-gnu
            gcc: powerpc64le-linux-gnu-gcc
            qemu: qemu-ppc64le
            qemu_args: -L /usr/powerpc64le-linux-gnu
            qemu_target: ppc64le-linux-user
          - build: riscv64-linux
            os: ubuntu-latest
            rust: nightly
            target: riscv64gc-unknown-linux-gnu
            gcc_package: gcc-riscv64-linux-gnu
            gcc: riscv64-linux-gnu-gcc
            qemu: qemu-riscv64
            qemu_args: -L /usr/riscv64-linux-gnu
            qemu_target: riscv64-linux-user
          - build: s390x-linux
            os: ubuntu-latest
            rust: nightly
            target: s390x-unknown-linux-gnu
            gcc_package: gcc-s390x-linux-gnu
            gcc: s390x-linux-gnu-gcc
            qemu: qemu-s390x
            qemu_args: -L /usr/s390x-linux-gnu
            qemu_target: s390x-linux-user
          - build: arm-linux
            os: ubuntu-latest
            rust: nightly
            target: armv5te-unknown-linux-gnueabi
            gcc_package: gcc-arm-linux-gnueabi
            gcc: arm-linux-gnueabi-gcc
            qemu: qemu-arm
            qemu_args: -L /usr/arm-linux-gnueabi
            qemu_target: arm-linux-user
          - build: ubuntu-stable
            os: ubuntu-latest
            rust: stable
          - build: i686-linux-stable
            os: ubuntu-latest
            rust: stable
            target: i686-unknown-linux-gnu
            gcc_package: gcc-i686-linux-gnu
            gcc: i686-linux-gnu-gcc
            libc_package: libc-dev-i386-cross
          - build: aarch64-linux-stable
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            gcc_package: gcc-aarch64-linux-gnu
            gcc: aarch64-linux-gnu-gcc
            qemu: qemu-aarch64
            qemu_args: -L /usr/aarch64-linux-gnu
            qemu_target: aarch64-linux-user
          - build: riscv64-linux-stable
            os: ubuntu-latest
            rust: stable
            target: riscv64gc-unknown-linux-gnu
            gcc_package: gcc-riscv64-linux-gnu
            gcc: riscv64-linux-gnu-gcc
            qemu: qemu-riscv64
            qemu_args: -L /usr/riscv64-linux-gnu
            qemu_target: riscv64-linux-user
          - build: s390x-linux-stable
            os: ubuntu-latest
            rust: stable
            target: s390x-unknown-linux-gnu
            gcc_package: gcc-s390x-linux-gnu
            gcc: s390x-linux-gnu-gcc
            qemu: qemu-s390x
            qemu_args: -L /usr/s390x-linux-gnu
            qemu_target: s390x-linux-user
          - build: powerpc64le-linux-stable
            os: ubuntu-latest
            rust: stable
            target: powerpc64le-unknown-linux-gnu
            gcc_package: gcc-powerpc64le-linux-gnu
            gcc: powerpc64le-linux-gnu-gcc
            qemu: qemu-ppc64le
            qemu_args: -L /usr/powerpc64le-linux-gnu
            qemu_target: ppc64le-linux-user
          - build: arm-linux-stable
            os: ubuntu-latest
            rust: stable
            target: armv5te-unknown-linux-gnueabi
            gcc_package: gcc-arm-linux-gnueabi
            gcc: arm-linux-gnueabi-gcc
            qemu: qemu-arm
            qemu_args: -L /usr/arm-linux-gnueabi
            qemu_target: arm-linux-user
          - build: ubuntu-1.63
            os: ubuntu-latest
            rust: 1.63
          - build: i686-linux-1.63
            os: ubuntu-latest
            rust: 1.63
            target: i686-unknown-linux-gnu
            gcc_package: gcc-i686-linux-gnu
            gcc: i686-linux-gnu-gcc
            libc_package: libc-dev-i386-cross
          - build: aarch64-linux-1.63
            os: ubuntu-latest
            rust: 1.63
            target: aarch64-unknown-linux-gnu
            gcc_package: gcc-aarch64-linux-gnu
            gcc: aarch64-linux-gnu-gcc
            qemu: qemu-aarch64
            qemu_args: -L /usr/aarch64-linux-gnu
            qemu_target: aarch64-linux-user
          - build: riscv64-linux-1.63
            os: ubuntu-latest
            rust: 1.63
            target: riscv64gc-unknown-linux-gnu
            gcc_package: gcc-riscv64-linux-gnu
            gcc: riscv64-linux-gnu-gcc
            qemu: qemu-riscv64
            qemu_args: -L /usr/riscv64-linux-gnu
            qemu_target: riscv64-linux-user
          - build: s390x-linux-1.63
            os: ubuntu-latest
            rust: 1.63
            target: s390x-unknown-linux-gnu
            gcc_package: gcc-s390x-linux-gnu
            gcc: s390x-linux-gnu-gcc
            qemu: qemu-s390x
            qemu_args: -L /usr/s390x-linux-gnu
            qemu_target: s390x-linux-user
          - build: powerpc64le-linux-1.63
            os: ubuntu-latest
            rust: 1.63
            target: powerpc64le-unknown-linux-gnu
            gcc_package: gcc-powerpc64le-linux-gnu
            gcc: powerpc64le-linux-gnu-gcc
            qemu: qemu-ppc64le
            qemu_args: -L /usr/powerpc64le-linux-gnu
            qemu_target: ppc64le-linux-user
          - build: arm-linux-1.63
            os: ubuntu-latest
            rust: 1.63
            target: armv5te-unknown-linux-gnueabi
            gcc_package: gcc-arm-linux-gnueabi
            gcc: arm-linux-gnueabi-gcc
            qemu: qemu-arm
            qemu_args: -L /usr/arm-linux-gnueabi
            qemu_target: arm-linux-user
          - build: macos-latest
            os: macos-latest
            rust: stable
          - build: macos-11
            os: macos-11
            rust: stable
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}

    - name: Configure Cargo target
      run: |
        echo CARGO_BUILD_TARGET=${{ matrix.target }} >> $GITHUB_ENV
        rustup target add ${{ matrix.target }}
      if: matrix.target != ''

    - uses: actions/cache@v4
      with:
        path: ${{ runner.tool_cache }}/qemu
        key: qemu-${{ matrix.target }}-${{ env.QEMU_BUILD_VERSION }}-patched
      if: matrix.target != '' && matrix.os == 'ubuntu-latest'

    - name: Install cross-compilation tools
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.gcc_package }} ninja-build libglib2.0-dev
        upcase=$(echo ${{ matrix.target }} | awk '{ print toupper($0) }' | sed 's/-/_/g')
        echo CARGO_TARGET_${upcase}_LINKER=${{ matrix.gcc }} >> $GITHUB_ENV
      if: matrix.gcc_package != '' && matrix.os == 'ubuntu-latest'

    - name: Install cross-compilation libraries
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.libc_package }}
      if: matrix.libc_package != '' && matrix.os == 'ubuntu-latest'

    - name: Install qemu
      run: |
        set -ex

        upcase=$(echo ${{ matrix.target }} | awk '{ print toupper($0) }' | sed 's/-/_/g')
        echo CARGO_TARGET_${upcase}_RUNNER=${{ runner.tool_cache }}/qemu/bin/${{ matrix.qemu }} ${{ matrix.qemu_args }} >> $GITHUB_ENV

        # See if qemu is already in the cache
        if [ -f ${{ runner.tool_cache }}/qemu/bin/${{ matrix.qemu }} ]; then
          exit 0
        fi

        # Download and build qemu from source since the most recent release is
        # way faster at arm emulation than the current version github actions'
        # ubuntu image uses. Disable as much as we can to get it to build
        # quickly.
        cd
        curl https://download.qemu.org/qemu-$QEMU_BUILD_VERSION.tar.xz | tar xJf -
        cd qemu-$QEMU_BUILD_VERSION
        patch -p1 < $GITHUB_WORKSPACE/ci/translate-errno.patch
        patch -p1 < $GITHUB_WORKSPACE/ci/getsockopt-timeouts.patch
        patch -p1 < $GITHUB_WORKSPACE/ci/s390x-stat-have-nsec.patch
        patch -p1 < $GITHUB_WORKSPACE/ci/aarch64-o-largefile.patch
        patch -p1 < $GITHUB_WORKSPACE/ci/tcgets2-tcsets2.patch
        ./configure --target-list=${{ matrix.qemu_target }} --prefix=${{ runner.tool_cache }}/qemu --disable-tools --disable-slirp --disable-fdt --disable-capstone --disable-docs
        ninja -C build install
      if: matrix.qemu != '' && matrix.os == 'ubuntu-latest'

    - run: |
        # Run the tests.
        cargo test --verbose --release --workspace -- --nocapture
      env:
        RUST_BACKTRACE: full
        MACOSX_DEPLOYMENT_TARGET: 10.7
        MACOSX_SDK_VERSION: 10.7
